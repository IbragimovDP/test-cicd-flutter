name: üì¶üöÄ Build & deploy iOS app
on:
  push
    # tags:
    #   - i*

jobs:
  deployIos:
    name: üçèüì¶üöÄ Build & deploy iOS release
    runs-on: macos-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3
      - name: üîê Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}"
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}"
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: "${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}"
          KEYCHAIN_PASSWORD: "${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}"
          EXPORT_OPTIONS_BASE64: "${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/app/ios/Runner/ExportOptions.plist"

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: üìù Edit pubspec version
        run: |
          sed -Ei "" "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/" app/pubspec.yaml
      - name: ‚öôÔ∏è Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.13.4"
          channel: 'stable'
          cache: true
        id: flutter
      - name: ‚öôÔ∏è Setup Melos
        uses: bluefireteam/melos-action@v2
      - name: ‚öôÔ∏è Install dependencies for all packages
        run: melos build:pub_get:all
      - name: üçèüì¶ Create iOS release
        run: |
          pushd app/
          flutter build ipa \
            --release \
            --target lib/main.dart \
            --export-options-plist=ios/Runner/ExportOptions.plist
          popd
      - name: üçèüöÄ Deploy to App Store (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ github.workspace }}/app/build/ios/ipa/flutter_ci_cd_demo.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}

# jobs:
#  deploy_ios:
#     uses: ibragimovdp/reusable-workflow/.github/workflows/ios-deploy.yaml@main
#     secrets:
#       ITC_TEAM_ID: '${{ secrets.ITC_TEAM_ID }}'
#       APPLICATON_ID: '${{ secrets.APPLICATON_ID }}'
#       BUNDLE_IDENTIFIER: '${{ secrets.BUNDLE_IDENTIFIER }}'
#       DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
#       FASTLANE_APPLE_EMAIL_ID: '${{ secrets.FASTLANE_APPLE_EMAIL_ID }}'
#       APP_SPECIFIC_PASSWORD: '${{ secrets.APP_SPECIFIC_PASSWORD }}'
#       MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
#       GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
#       PROVISIONING_PROFILE_SPECIFIER: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}'
#       TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
#       TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'
#       SLACK_NOTIFICATIONS_BOT_TOKEN: '${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}'


# on:
#   workflow_call:
#     inputs:
#       flavor:
#         required: true
#         type: string
#       new-pubspec-version:
#         required: true
#         type: string
